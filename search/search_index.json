{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to our website.</p>"},{"location":"checklist/","title":"Site Checklist","text":"<ol> <li>Customize the fields in your mkdocs.yml file</li> <li>Configure Google Analytics to use the right site ID</li> <li>Make sure that your .gitignore file includes the <code>site</code> directory</li> <li>Test the build</li> <li>Make sure the Edit button appears</li> <li>Make sure that code color heightening renders correctly</li> <li>run <code>git config advice.addIgnoredFile false</code></li> </ol>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"feedback/","title":"Feedback on Graph Data Modeling","text":"<p>You are welcome to connect with me on anytime on LinkedIn or submit any issues to GitHub Issue Log.  All pull-requests with fixes to errors or additions are always welcome.</p> <p>If you would like to fill out a short survey and give us ideas on how we can create better tools for intelligent textbooks in the future.</p>"},{"location":"glossary/","title":"Glossary of Terms","text":""},{"location":"glossary/#iso-definition","title":"ISO Definition","text":"<p>A term definition is considered to be consistent with ISO metadata registry guideline 11179 if it meets the following criteria:</p> <ol> <li>Precise</li> <li>Concise</li> <li>Distinct</li> <li>Non-circular</li> <li>Unencumbered with business rules</li> </ol>"},{"location":"glossary/#term","title":"Term","text":"<p>This is the definition of the term.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#enable-edit-icon","title":"Enable Edit Icon","text":"<p>To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area.</p> <pre><code>edit_uri: edit/master/docs/\n</code></pre> <pre><code>    theme:\n        features:\n            - content.action.edit\n</code></pre>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p>"},{"location":"how-we-built-this-site/#image-generation-and-compression","title":"Image Generation and Compression","text":"<p>I have used ChatGPT to create most of my images.  However, they are too large for most websites.  To compress them down I used  https://tinypng.com/ which is a free tool  for compressing png images without significant loss of quality.  The files created with ChatGPT are typically around 1-2 MB.  After  using the TinyPNG site the size is typically around 200-300KB.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"Site References","text":"<ol> <li>mkdocs - https://www.mkdocs.org/ - this is our tool for building the website.  It converts Markdown into HTML in the <code>site</code> directory.</li> <li>mkdocs material theme - https://squidfunk.github.io/mkdocs-material/ - this is the theme for our site.  The theme adds the user interface elements that give our site the look and feel.  It also has the features such as social cards.</li> <li>GitHub Pages - https://pages.github.com/ - this is the free tool for hosting public websites created by mkdocs</li> <li>Markdown - https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown - this is the format we use for text.  It allows us to have headers, lists, tables, links and images without learning HTML.</li> <li>Deploy Mkdocs GitHub Action - https://github.com/marketplace/actions/deploy-mkdocs - this is the tool we use to automatically build our site after edits are checked in with Git.</li> <li>Git Book - https://git-scm.com/book/en/v2 - a useful book on Git.  Just read the first two chapters to learn how to check in new code.</li> <li>Conda - https://conda.io/ - this is a command line tool that keeps our Python libraries organized for each project.</li> <li>VS Code - https://code.visualstudio.com/ - this is the integrated development environment we use to mange the files on our website.</li> <li>Markdown Paste - https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image - this is the VS code extension we use to make sure we keep the markdown format generated by ChatGPT.</li> </ol>"},{"location":"prompts/","title":"Prompts","text":"<ol> <li>Course Description - we usually start with a generic course description as it would appear in a course catalog</li> <li>Bloom Taxonomy Refinements - we refine the course description to fit Blooms't taxonomy which starts out with concept definitions and proceeds to creating hands-on skills for creating new content</li> <li>Concept Enumeration - create a flat list of about 150 concepts ideally sorted from simple to complex</li> <li>Concept Dependencies - for each concept, create a list of what other concepts it depends on</li> <li>Concept Taxonomy - for all the concepts, create about ten classifications for all the concepts</li> <li>Concept Classification -- for each Concept in the graph, assign it to a primary Taxonomy ID</li> <li>Content Generation - once you have your concepts organized, you can then use this knowledge to create various content in different languages</li> <li>Glossary of Terms - we can generate an ISO-11179 concept definition for each of the concepts in our concept graph</li> </ol>"},{"location":"prompts/#course-description","title":"Course Description","text":"<p>Course Description</p>"},{"location":"prompts/#concept-enumeration","title":"Concept Enumeration","text":""},{"location":"prompts/concept-dependencies/","title":"Concept Dependencies","text":"<p>Prompt</p> <p>You are an expert at generating precise ordered lists of concept labels that are taught in college-level computer science courses.</p> <p>Return numbered list of these core concept labels for the course description for the GQL course above. Return a single line per concept. For each concept, just return a short concept label in title case form. Use acronyms or abbreviations when appropriate.  They will be used as labels in a graph network. Make sure that the concepts are distinct not duplicated in the list.</p> <p>Start with the most basic foundational concepts and then proceed to the most complex concepts.</p> <p>I appreciate your feedback regarding the focus on the Graph Query Language (GQL) and the inclusion of unrelated concepts. I understand your concern that topics like blockchain and cryptocurrency are not directly relevant to understanding GQL, and I will ensure that the discussion is refined to focus exclusively on concepts essential for mastering GQL, its features, and its applications.</p> <p>Below, I will provide a detailed discussion of GQL, emphasizing its core concepts, syntax, features, and context, while ensuring that every concept is directly related to understanding the language. I have removed any unrelated or tangential topics to maintain relevance.</p>"},{"location":"prompts/concept-dependencies/#understanding-the-graph-query-language-gql","title":"Understanding the Graph Query Language (GQL)","text":"<p>GQL is a declarative query language designed specifically for querying graph databases, particularly those using the Labeled Property Graph (LPG) model. It was developed to address the need for a standardized, portable query language for graph data, and it is defined under the ISO/IEC 39075 standard. GQL aims to provide a robust and efficient way to query complex graph structures, making it suitable for applications like social networks, recommendation systems, fraud detection, and knowledge graphs.</p> <p>To understand GQL, we need to cover foundational concepts in databases and graph theory, the specifics of the LPG model, GQL's syntax and features, and its relationship to other query languages. Below, I will break down the key concepts into categories for clarity.</p>"},{"location":"prompts/concept-dependencies/#foundational-concepts","title":"Foundational Concepts","text":"<p>To understand GQL, we first need to establish a foundation in databases and query languages. These concepts are essential prerequisites:</p> <ul> <li>Database: A structured collection of data, typically stored and accessed electronically.</li> <li>Query Language: A language used to retrieve, manipulate, and manage data in a database.</li> <li>Declarative Query Language: A query language where the user specifies what data is needed, not how to retrieve it (e.g., SQL, GQL).</li> <li>Relational Database: A database organized into tables, rows, and columns, based on relational algebra.</li> <li>SQL: A standard query language for relational databases, which serves as a point of comparison for GQL.</li> <li>Data Model: A conceptual framework for organizing and representing data (e.g., relational, graph).</li> <li>Graph Database: A database that uses graph structures (nodes, edges, properties) to store and query data.</li> <li>Graph Theory: The mathematical study of graphs, providing concepts like nodes (vertices), edges (relationships), paths, and cycles, which are essential for understanding graph databases.</li> </ul>"},{"location":"prompts/concept-dependencies/#the-labeled-property-graph-lpg-model","title":"The Labeled Property Graph (LPG) Model","text":"<p>GQL is tailored for the LPG model, which is a specific type of graph data model. Understanding the LPG model is crucial for mastering GQL:</p> <ul> <li>Node (Vertex): Represents an entity in the graph (e.g., a person, a product).</li> <li>Edge (Relationship): Represents a connection between nodes (e.g., \"FRIENDS_WITH\", \"PURCHASED\").</li> <li>Property: A key-value pair associated with a node or edge (e.g., name=\"Alice\", age=30).</li> <li>Label: A tag assigned to a node or edge to categorize it (e.g., :Person, :Product).</li> <li>Directed Graph: A graph where edges have a direction (e.g., A \u2192 B).</li> <li>Path: A sequence of nodes and edges connecting them (e.g., A \u2192 B \u2192 C).</li> <li>Graph Schema: A blueprint defining the structure of nodes, edges, labels, and properties in the graph.</li> </ul> <p>These concepts form the foundation of how data is structured and queried in GQL.</p>"},{"location":"prompts/concept-dependencies/#gql-syntax-and-core-features","title":"GQL Syntax and Core Features","text":"<p>GQL's syntax is designed to be intuitive and expressive, particularly for querying graph data. Below are some of its core features and clauses:</p> <ul> <li>MATCH Clause: Specifies patterns to search for in the graph (e.g., MATCH (p:Person)-[:FRIENDS_WITH]-&gt;(f:Person)).</li> <li>RETURN Clause: Defines the data to be returned from the query (e.g., RETURN p.name, f.name).</li> <li>WHERE Clause: Filters results based on conditions (e.g., WHERE p.age &gt; 25).</li> <li>CREATE Clause: Creates new nodes, edges, or properties (e.g., CREATE (p:Person {name: \"Alice\", age: 30})).</li> <li>SET Clause: Updates properties of nodes or edges (e.g., SET p.age = 31).</li> <li>DELETE Clause: Removes nodes, edges, or properties (e.g., DELETE p).</li> <li>OPTIONAL MATCH: Matches patterns optionally, returning NULL if no match is found.</li> <li>ORDER BY: Sorts the results (e.g., ORDER BY p.name ASC).</li> <li>LIMIT and SKIP: Controls the number of results returned (e.g., LIMIT 10, SKIP 5).</li> <li>UNION: Combines results from multiple queries.</li> <li>WITH Clause: Chains subqueries, passing intermediate results (e.g., MATCH (p:Person) WITH p ORDER BY p.age RETURN p.name).</li> <li>UNWIND: Expands a list into individual rows (e.g., UNWIND [1, 2, 3] AS x RETURN x).</li> <li>Aggregation Functions: Performs calculations on data (e.g., COUNT, SUM, AVG).</li> <li>Pattern Matching: A core feature of GQL, allowing users to specify complex graph patterns (e.g., MATCH (a)-[*1..3]-&gt;(b)).</li> </ul> <p>GQL also supports advanced querying techniques, such as: - Subqueries: Nested queries for complex operations. - Path Expressions: Queries that traverse paths in the graph. - Quantified Path Patterns: Patterns that specify conditions on paths (e.g., shortest path, longest path). - List Comprehension and Map Projection: Advanced data manipulation features.</p>"},{"location":"prompts/concept-dependencies/#comparing-gql-to-other-query-languages","title":"Comparing GQL to Other Query Languages","text":"<p>Understanding how GQL relates to other query languages helps highlight its unique features:</p> <ul> <li>GQL vs SQL: SQL is designed for relational databases, while GQL is tailored for graph databases. GQL excels at querying complex relationships, while SQL is better for tabular data.</li> <li>GQL vs Cypher: Cypher, used by Neo4j, is similar to GQL but lacks standardization. GQL is an ISO standard, ensuring portability across vendors.</li> <li>GQL vs SPARQL: SPARQL is used for RDF (Resource Description Framework) graphs, while GQL focuses on LPG graphs. GQL is typically more intuitive for property graph queries.</li> </ul> <p>These comparisons emphasize GQL's advantages, such as its focus on graph data, standardized syntax, and portability, as well as its limitations, such as its specificity to LPG graphs.</p>"},{"location":"prompts/concept-dependencies/#advanced-gql-concepts","title":"Advanced GQL Concepts","text":"<p>For a deeper understanding of GQL, we must explore its advanced features and operational aspects:</p> <ul> <li>Transactions: GQL supports ACID-compliant transactions (Atomicity, Consistency, Isolation, Durability) for reliable data manipulation.</li> <li>Query Optimization: Techniques to improve query performance, such as indexing, query planning, and cost estimation.</li> <li>Indexing: GQL uses indexes (e.g., node label indexes, property indexes) to speed up query execution.</li> <li>Constraints: Ensures data integrity (e.g., unique constraints, existence constraints).</li> <li>Security: Features like access control, authentication, and auditing to secure graph data.</li> <li>Scalability: GQL supports distributed queries, parallel processing, and sharding for large-scale applications.</li> <li>Performance Tuning: Best practices for optimizing GQL queries, such as avoiding overly complex patterns and leveraging indexes.</li> </ul>"},{"location":"prompts/concept-dependencies/#gql-applications-and-use-cases","title":"GQL Applications and Use Cases","text":"<p>GQL is particularly well-suited for applications involving complex relationships. Below are some relevant use cases:</p> <ul> <li>Social Network Graphs: Querying friendships, followers, and communities.</li> <li>Retail Recommendation Graphs: Analyzing purchase histories and recommending products.</li> <li>Fraud Detection Graphs: Identifying suspicious patterns in financial transactions.</li> <li>Healthcare Knowledge Graphs: Modeling relationships between patients, diseases, and treatments.</li> <li>GQL in AI: Supporting graph-based AI models, such as knowledge graphs for natural language processing (NLP) or machine learning.</li> </ul> <p>These use cases demonstrate GQL's practical relevance and its ability to handle graph-specific queries efficiently.</p>"},{"location":"prompts/concept-dependencies/#gql-best-practices-and-integration","title":"GQL Best Practices and Integration","text":"<p>To use GQL effectively, consider the following best practices:</p> <ul> <li>Schema Design: Define clear graph schemas with appropriate labels, properties, and constraints.</li> <li>Query Optimization: Use indexes, limit result sizes, and avoid unnecessary traversals.</li> <li>Data Modeling: Map real-world relationships to nodes and edges effectively.</li> <li>Integration with Programming Languages: GQL can be integrated with languages like Python, Java, JavaScript, and C# using drivers and APIs.</li> </ul>"},{"location":"prompts/concept-dependencies/#gql-community-and-future-developments","title":"GQL Community and Future Developments","text":"<p>GQL is an evolving language with a growing community:</p> <ul> <li>Standardization Process: GQL is developed by the ISO/IEC JTC 1/SC 32 working group, ensuring vendor neutrality and portability.</li> <li>Future Developments: Potential enhancements include advanced pattern matching, vector index support, and integration with AI-driven large world-models.</li> <li>Resources: Official documentation, community forums, and tutorials are available to support learning and adoption.</li> </ul>"},{"location":"prompts/concept-dependencies/#summary","title":"Summary","text":"<p>In this discussion, I have focused exclusively on concepts directly related to understanding GQL, ensuring that every topic is relevant to mastering the language. We covered:</p> <ul> <li>Foundational database and graph theory concepts.</li> <li>The Labeled Property Graph (LPG) model, which GQL is designed for.</li> <li>GQL's syntax, core features, and advanced querying techniques.</li> <li>Comparisons with other query languages (SQL, Cypher, SPARQL).</li> <li>Advanced operational aspects, such as transactions, optimization, and security.</li> <li>Practical use cases and best practices for using GQL.</li> <li>The GQL community and potential future developments.</li> </ul> <p>By focusing on these concepts, we ensure a comprehensive understanding of GQL while avoiding unrelated topics like blockchain or cryptocurrency. This refined approach aligns with the learning objectives of mastering GQL and its applications.</p>"},{"location":"prompts/concept-dependencies/#response","title":"Response","text":"<p>Below is a numbered list of the 200 most important core concept labels for the \"Learning GQL with AI\" course, presented in a precise order from foundational to advanced topics. Each concept is distinct, builds on prior concepts where applicable, and is formatted as an integer ID followed by a short label in title case, using acronyms or abbreviations where appropriate. These labels are suitable for use in a graph network.</p>"},{"location":"prompts/concept-dependencies/#200-core-concept-labels","title":"200 Core Concept Labels","text":"<p>Below is a list of the 200 most relevant concepts for the \"Learning GQL with AI\" course, presented in title case. Each concept is directly related to understanding the Graph Query Language (GQL), its features, and its applications. The concepts are organized from foundational to advanced topics, ensuring a logical progression for learning GQL effectively.</p>"},{"location":"prompts/concept-dependencies/#200-most-relevant-concepts-for-the-gql-course","title":"200 Most Relevant Concepts for the GQL Course","text":"<ol> <li>Database </li> <li>Query Language </li> <li>Declarative Programming </li> <li>SQL </li> <li>Relational Model </li> <li>Table </li> <li>Row </li> <li>Column </li> <li>Primary Key </li> <li>Foreign Key </li> <li>JOIN Operation </li> <li>Normalization </li> <li>ACID Properties </li> <li>Transaction </li> <li>Commit </li> <li>Rollback </li> <li>Data Type </li> <li>String </li> <li>Integer </li> <li>Decimal </li> <li>List </li> <li>Schema </li> <li>Index </li> <li>CRUD Operations </li> <li>SELECT Statement </li> <li>INSERT Statement </li> <li>UPDATE Statement </li> <li>DELETE Statement </li> <li>WHERE Clause </li> <li>GROUP BY </li> <li>ORDER BY </li> <li>Aggregation Function </li> <li>Subquery </li> <li>View </li> <li>Stored Procedure </li> <li>Trigger </li> <li>DBMS </li> <li>RDBMS </li> <li>Graph Database </li> <li>Graph Theory </li> <li>Node </li> <li>Edge </li> <li>Property </li> <li>Label </li> <li>Directed Graph </li> <li>Undirected Graph </li> <li>Labeled Property Graph </li> <li>Graph Schema </li> <li>Path </li> <li>Cycle </li> <li>Traversal </li> <li>Shortest Path </li> <li>Breadth-First Search </li> <li>Depth-First Search </li> <li>Graph Algorithm </li> <li>Centrality Measure </li> <li>Community Detection </li> <li>Similarity Measure </li> <li>Jaccard Index </li> <li>Cosine Similarity </li> <li>Euclidean Distance </li> <li>Vector Space </li> <li>Embedding </li> <li>Graph Neural Network </li> <li>Artificial Intelligence </li> <li>Machine Learning </li> <li>Natural Language Processing </li> <li>Knowledge Graph </li> <li>Ontology </li> <li>Semantic Web </li> <li>RDF </li> <li>SPARQL </li> <li>XML </li> <li>XQuery </li> <li>JSON </li> <li>JSON-LD </li> <li>Cypher </li> <li>OpenCypher </li> <li>MATCH Clause </li> <li>RETURN Clause </li> <li>CREATE Clause </li> <li>SET Clause </li> <li>DELETE Clause </li> <li>MERGE Clause </li> <li>OPTIONAL MATCH </li> <li>WITH Clause </li> <li>UNWIND Clause </li> <li>Pattern Matching </li> <li>Regular Expression </li> <li>Constraint </li> <li>Unique Constraint </li> <li>Existence Constraint </li> <li>Role-Based Access Control </li> <li>Accumulator </li> <li>Aggregation </li> <li>Grouping </li> <li>Filtering </li> <li>Sorting </li> <li>Projection </li> <li>Union </li> <li>Intersection </li> <li>Difference </li> <li>Cartesian Product </li> <li>Join </li> <li>Inner Join </li> <li>Outer Join </li> <li>Self-Join </li> <li>Anti-Join </li> <li>Semi-Join </li> <li>Equi-Join </li> <li>Theta Join </li> <li>Natural Join </li> <li>Database Index </li> <li>B-Tree Index </li> <li>Hash Index </li> <li>Full-Text Index </li> <li>Spatial Index </li> <li>Vector Index </li> <li>Similarity Search </li> <li>Approximate Nearest Neighbors </li> <li>High-Dimensional Data </li> <li>Curse of Dimensionality </li> <li>Dimensionality Reduction </li> <li>Principal Component Analysis </li> <li>t-Distributed Stochastic Neighbor Embedding </li> <li>Autoencoder </li> <li>Feature Extraction </li> <li>Feature Engineering </li> <li>Data Preprocessing </li> <li>Data Cleaning </li> <li>Data Transformation </li> <li>Data Integration </li> <li>Extract, Transform, Load </li> <li>Data Warehouse </li> <li>Data Lake </li> <li>Big Data </li> <li>Distributed Computing </li> <li>Hadoop </li> <li>Spark </li> <li>MapReduce </li> <li>Parallel Processing </li> <li>Scalability </li> <li>Performance Optimization </li> <li>Query Optimization </li> <li>Cost-Based Optimization </li> <li>Rule-Based Optimization </li> <li>Execution Plan </li> <li>Query Plan </li> <li>Indexing Strategy </li> <li>Caching </li> <li>Materialized View </li> <li>Database Partitioning </li> <li>Sharding </li> <li>Replication </li> <li>Consistency </li> <li>Availability </li> <li>Partition Tolerance </li> <li>CAP Theorem </li> <li>Eventual Consistency </li> <li>Strong Consistency </li> <li>Distributed Transaction </li> <li>Two-Phase Commit </li> <li>Consensus Algorithm </li> <li>Paxos </li> <li>Raft </li> <li>Blockchain </li> <li>Smart Contract </li> <li>Cryptocurrency </li> <li>Decentralized Application </li> <li>Internet of Things </li> <li>Edge Computing </li> <li>Cloud Computing </li> <li>Serverless Architecture </li> <li>Microservices </li> <li>Application Programming Interface </li> <li>Representational State Transfer </li> <li>GraphQL </li> <li>Web Service </li> <li>Service-Oriented Architecture </li> <li>Enterprise Application Integration </li> <li>Middleware </li> <li>Message Queue </li> <li>Publish-Subscribe Pattern </li> <li>Event-Driven Architecture </li> <li>Stream Processing </li> <li>Batch Processing </li> <li>Real-Time Analytics </li> <li>Data Visualization </li> <li>Dashboard </li> <li>Business Intelligence </li> <li>Decision Support System </li> <li>World-Model </li> <li>Graph Query Language </li> <li>ISO/IEC 39075 </li> <li>Standardization </li> <li>Vendor Lock-In </li> <li>Portability </li> <li>Interoperability </li> <li>Graph Database Management System </li> <li>GQL Query </li> </ol> <p>This list provides a comprehensive foundation for learning GQL, starting with basic database concepts, progressing through graph-specific ideas like nodes and edges, and culminating in GQL syntax, optimization techniques, and real-world applications. Each term is carefully selected to enhance your understanding of GQL and its role in modern data management and AI-driven solutions.</p>"},{"location":"prompts/concept-enumeration/","title":"Concept Enumeration","text":"<p>Prompt</p> <p>You are an expert at helping instructors create a high-quality list of  ordered concept labels used to create a ground truth for intelligent agents.  These concepts and agents are used in college-level  computer science courses.</p> <p>Return numbered list of these core concept labels for the course description for the GQL course above. Return a single line per concept. For each concept, just return a short concept label in title case form. Use acronyms or abbreviations when appropriate.  They will be used as labels in a graph network. Make sure that the concepts are distinct not duplicated in the list.</p> <p>Start with the most basic foundational concepts and then proceed to the most complex concepts.</p> <p>Please generate a numbered list of this course's 200 most important concepts. </p> <p>Pay special attention to the order of these concepts, placing foundational concepts first and more advanced concepts last. Try to order the list so concepts later only depend on prior concepts already listed.</p>"},{"location":"prompts/concept-enumeration/#chatgqp-o1-response","title":"ChatGQP o1 Response","text":"<ol> <li>Data And Databases </li> <li>Structured Vs. Unstructured Data </li> <li>DBMS </li> <li>Data Models (Hierarchical, Network, Relational, NoSQL) </li> <li>Tables, Rows &amp; Columns </li> <li>Primary &amp; Foreign Keys </li> <li>ER Modeling </li> <li>Normalization Principles </li> <li>Intro To Transactions </li> <li>Concurrency Control </li> <li>Database Security Basics </li> <li>Declarative Query Languages (Intro) </li> <li>Query Processing &amp; Optimization </li> <li>JOIN Operation Costs </li> <li>Relational Scalability Challenges </li> <li>Stored Procedures &amp; Extensions </li> <li>Relational Model Limitations </li> <li>ORMs </li> <li>NoSQL Basics </li> <li>Evolving Data Needs </li> <li>Declarative Vs. Imperative </li> <li>SQL Origins &amp; Purpose </li> <li>XQuery Origins &amp; Purpose </li> <li>OpenCypher Origins &amp; Purpose </li> <li>Commonalities Among SQL, XQuery &amp; OpenCypher </li> <li>SELECT, MATCH, FOR, RETURN </li> <li>Basic SQL Queries </li> <li>Basic XQuery Expressions </li> <li>Basic OpenCypher Queries </li> <li>Declarative Language Standards </li> <li>Database Vendor Lock-In </li> <li>ISO &amp; W3C </li> <li>Database Standards Evolution </li> <li>Standardization Benefits </li> <li>SQL Extensions </li> <li>OpenCypher Standardization </li> <li>XQuery Standard Adoption </li> <li>Declarative Query Performance </li> <li>Analytical Vs. Transactional </li> <li>Productivity With Declarative Languages </li> <li>SQL DDL </li> <li>SQL DML </li> <li>SQL SELECT </li> <li>Subqueries &amp; Derived Tables </li> <li>JOIN Types </li> <li>SQL Set Operations </li> <li>SQL Window Functions </li> <li>SQL Transactions &amp; Isolation </li> <li>Stored Procs &amp; Functions </li> <li>SQL Views </li> <li>SQL Indexes </li> <li>Materialized Views </li> <li>Query Plan Analysis </li> <li>JOIN Bottlenecks </li> <li>Distributed Database Challenges </li> <li>Complex Data In RDBMS </li> <li>Large-Scale Relational Edge Cases </li> <li>Transaction Processing With SQL </li> <li>SQL Query Portability </li> <li>Relational Limits For Complex Relationships </li> <li>Graph Theory Basics </li> <li>Graph Data Models (Property, RDF, Etc.) </li> <li>Labeled Property Graph (LPG) </li> <li>LPG Vs. Relational </li> <li>LPG Nodes </li> <li>LPG Relationships </li> <li>LPG Properties </li> <li>Graph Schemas Vs. Schema-On-Read </li> <li>Social Network Use Cases </li> <li>Retail Commerce Use Cases </li> <li>Banking Fraud Use Cases </li> <li>Healthcare Use Cases </li> <li>Querying LPG </li> <li>Graph Traversals </li> <li>Many-To-Many In Graphs </li> <li>Graph DB Performance </li> <li>When Not To Use Graph </li> <li>Graph DB Providers </li> <li>RDB-To-Graph Migration </li> <li>Graph Adoption Challenges </li> <li>SQL Shortcomings For Graph </li> <li>Table-Graph Mismatch </li> <li>JOIN Explosion </li> <li>No Relationship Property Support </li> <li>Schema Rigidity In SQL </li> <li>Graph-Specific Queries </li> <li>Graph Query Industry Demand </li> <li>Experimental SQL Graph Extensions </li> <li>Traversal Vs. Set-Based Impedance </li> <li>Need For Graph Standard </li> <li>RDF/SPARQL Alternative </li> <li>Complex Path Queries </li> <li>Graph Indexes </li> <li>Advanced Path Functions </li> <li>Vendor Graph Extensions </li> <li>Recursive CTEs </li> <li>Semi-Structured Data In SQL </li> <li>Graph Analytics Vs. Transactional </li> <li>No Official SQL Graph Standard </li> <li>GQL Motivation </li> <li>ISO/IEC 39075 (GQL) </li> <li>GQL Principles </li> <li>GQL Syntax Basics </li> <li>GQL Nodes </li> <li>GQL Relationships </li> <li>GQL Pattern Matching </li> <li>MATCH, WHERE, RETURN </li> <li>GQL Variable Binding </li> <li>GQL Property Filtering </li> <li>GQL Aggregations </li> <li>Creating &amp; Deleting In GQL </li> <li>Updating GQL Properties </li> <li>GQL Transactions </li> <li>GQL Schema Definition </li> <li>Graph Metadata </li> <li>GQL Execution Model </li> <li>GQL Vs. OpenCypher </li> <li>GQL Vs. SQL Mindset </li> <li>GQL Implementations </li> <li>GQL Portability Benefits </li> <li>Label Inheritance </li> <li>Advanced MATCH </li> <li>Pattern Predicates </li> <li>GQL Subqueries </li> <li>Graph-Specific Ops </li> <li>Complex Conditionals </li> <li>Merging Subgraphs </li> <li>Graph Pattern Unions </li> <li>Graph Functions &amp; Procedures </li> <li>Schema Evolution (Future) </li> <li>Multiple Graphs </li> <li>Graph Constraints (Future) </li> <li>GQL Metadata Management </li> <li>GQL &amp; Transactions </li> <li>GQL Indexing </li> <li>GQL Execution Sequence </li> <li>Error Handling In GQL </li> <li>Basic GQL Security </li> <li>GQL Extensibility </li> <li>Sample GQL Queries </li> <li>GQL Vs. SQL Vs. OpenCypher </li> <li>Declarative Style Similarities </li> <li>Syntax Parallels (Match Vs. Select) </li> <li>Table Vs. Graph Data Models </li> <li>ACID Transactions </li> <li>Schema Strictness Comparison </li> <li>Complex Relationships In Graph </li> <li>Hierarchical Queries </li> <li>Standard Statuses </li> <li>Plan Execution Differences </li> <li>Developer Familiarity Gap </li> <li>Result Structures (Table Vs. Graph) </li> <li>GQL Learning Curve </li> <li>Industry Support For GQL </li> <li>SQL-To-GQL Migration </li> <li>Graph Performance Tuning </li> <li>Analytics Extensions </li> <li>Graph Processing At Scale </li> <li>Ecosystem Communities </li> <li>Direct Query Portability </li> <li>Choosing SQL Vs. GQL </li> <li>Advanced GQL Patterns </li> <li>GQL Recursion </li> <li>Graph Union &amp; Intersection </li> <li>Pattern-Based Joins </li> <li>Temporal &amp; Versioned GQL Data </li> <li>Graph Analytics Integration </li> <li>Streaming GQL </li> <li>GQL Constraint Limits </li> <li>RBAC In Graph </li> <li>Distributed GQL Queries </li> <li>Large Graph Performance </li> <li>GQL Language Maturity </li> <li>Cross-Graph Queries </li> <li>ACID In Graph Updates </li> <li>GQL Governance &amp; Auditing </li> <li>Graph Backup &amp; Restore </li> <li>GQL Benchmarking </li> <li>GQL Storage Formats </li> <li>GQL Community Evolution </li> <li>Vendor Roadmaps For GQL </li> <li>Vector Ops In Graph </li> <li>Semantic Layer With GQL </li> <li>Graph Data Science </li> <li>ML Integration </li> <li>Natural Language To GQL </li> <li>Automated Graph Modeling </li> <li>Distributed Graph Computing </li> <li>Real-Time Graph </li> <li>Graph Visualization </li> <li>Emerging Graph Apps </li> <li>GQL Standards Evolution </li> <li>SQL &amp; GQL Convergence </li> <li>AI Querying </li> <li>Graph Transaction Semantics </li> <li>RBAC Roadmap </li> <li>Multigraph &amp; Hypergraph Extensions </li> <li>Graph &amp; Data Lakes </li> <li>Cloud GQL </li> <li>Universal Graph Language</li> </ol>"},{"location":"prompts/course-description/","title":"Course Description","text":"<p>Prompt</p> <p>You are an expert at helping instructors create a high-quality curriculum and detailed course descriptions that follow the structure of the 2001 Bloom taxonomy to create an ordered list of learning objectives. </p> <p>The ISO standards organization just created a new standard for queries on labeled property graphs. This new standard query language is called the \"Graph Query Language\" or GQL. The full standard is described in ISO/IEC 39075, released in April 2024. </p> <p>I would like to teach a course on GQL but I need your help creating a highly detailed course description for this GQL course and in what order they should be taught. </p> <p>Course Description: \"Learning GQL with AI\". Audience: This be taught by computer science and engineering colleges and universities around the world.</p> <p>Prerequisites: Students must already taken a introduction to databases course.  Students should also be familiar with data types such as strings, integers, decimals and lists.</p> <p>Here are some of the goals of this course: </p> <ol> <li>Understand the basic principles of current declarative query languages such as SQL, OpenCypher, SPARQL, and XQuery.</li> <li>Understand why standards make code that uses these languages more portable and prevents lock-in to vendor-specific database features.</li> <li>Understand the limitations of relational databases and their performance problems when doing large numbers of JOIN operations.</li> <li>Understand why the labeled-property-graph (LPG) model creates more accurate models of the world where relationships have their own properties.</li> <li>Understand why the current SQL language does not meet the needs of these LPG databases. </li> <li>Be able to describe the LPG data model and how relationships have their own properties. </li> <li>Give examples of LPG data models for social networks, retail commerce, banking fraud, and healthcare. </li> <li>Describe the key features of GQL, including how queries are created.</li> <li>Compare and contrast how GQL is similar and different from SQL </li> <li>Show that both GQL and SQL have similar support for transactions. </li> <li>Compare and contrast how GQL is both similar and different from OpenCypher </li> <li>Discuss the new features of GQL </li> <li>Discuss how GQL supports advanced pattern matching </li> <li>Discuss the limitations of the current version of GQL, including lack of support for constraints, role-based access control for vertices, and lack of support for accumulators</li> <li>Discuss the need for a new vector-index structure for similarity calculations </li> <li>Describe how future AI systems depend on generating precise queries over large world-models </li> </ol> <p>Please generate a detailed course description that follows the 2001 Bloom Taxonomy guidelines. </p> <p>Pay special attention to the order of the course learning objectives.</p>"},{"location":"prompts/course-description/#response","title":"Response","text":"<p>Grok-3 in Thinking mode thought for 38 seconds.</p> <p>Link to Grok-3 Transcript</p>"},{"location":"prompts/course-description/#course-description-for-learning-gql-with-ai","title":"Course Description for \"Learning GQL with AI\"","text":"<p>The International Organization for Standardization (ISO) has recently introduced the Graph Query Language (GQL) as a new standard for querying labeled property graphs, detailed in ISO/IEC 39075, released in April 2024. \"Learning GQL with AI\" is a comprehensive course designed for computer science and engineering students at colleges and universities worldwide. This course equips learners with the knowledge and skills to effectively utilize GQL for querying graph databases, leveraging the structured framework of the 2001 Bloom Taxonomy to progress from foundational understanding to advanced application and critical evaluation. By integrating AI-powered tools, the course enhances the learning experience, providing students with personalized feedback and practical insights into GQL\u2019s role in modern and future technologies.</p>"},{"location":"prompts/course-description/#audience","title":"Audience","text":"<p>This course targets computer science and engineering students who have completed an introductory database course and are familiar with basic data types such as strings, integers, decimals, and lists. It is tailored to prepare students for academic, research, or industry roles where graph databases and query languages are pivotal.</p>"},{"location":"prompts/course-description/#prerequisites","title":"Prerequisites","text":"<ul> <li>Completion of an Introductory Database Course: Students should have a basic understanding of database concepts, including relational models and querying fundamentals.</li> <li>Familiarity with Basic Data Types: Knowledge of strings, integers, decimals, and lists is required to engage with GQL syntax and data structures effectively.</li> </ul>"},{"location":"prompts/course-description/#course-description_1","title":"Course Description","text":"<p>\"Learning GQL with AI\" offers an in-depth exploration of the Graph Query Language (GQL), the latest ISO standard for querying labeled property graphs. Students will develop a thorough understanding of GQL\u2019s foundations, its relationship to other query languages, and its practical applications in real-world scenarios. The course progresses through six carefully structured units, each aligned with the 2001 Bloom Taxonomy levels\u2014Remember, Understand, Apply, Analyze, Evaluate, and Create\u2014to ensure a logical and comprehensive learning journey. Hands-on exercises, supported by AI tools, enable students to design graph schemas, write optimized queries, and critically assess GQL\u2019s capabilities and limitations. By the end, students will be proficient in GQL and prepared to leverage its potential in graph-based applications, including those intersecting with artificial intelligence.</p>"},{"location":"prompts/course-description/#course-objectives","title":"Course Objectives","text":"<p>Upon successful completion of this course, students will be able to:</p>"},{"location":"prompts/course-description/#1-understand-the-context-and-need-for-gql","title":"1. Understand the Context and Need for GQL","text":"<ul> <li>Describe the basic principles of declarative query languages such as SQL, OpenCypher, SPARQL, and XQuery. (Understand)</li> <li>Explain the importance of standards in query languages for ensuring code portability and preventing vendor-specific lock-in. (Understand)</li> <li>Identify the limitations of relational databases, particularly performance issues with large numbers of JOIN operations. (Remember and Understand)</li> <li>Summarize the advantages of the labeled-property-graph (LPG) model for creating accurate models of real-world relationships. (Understand)</li> <li>Discuss why SQL is insufficient for meeting the querying needs of LPG databases. (Understand)</li> </ul>"},{"location":"prompts/course-description/#2-master-the-lpg-data-model","title":"2. Master the LPG Data Model","text":"<ul> <li>Define the components of the LPG data model, including vertices, edges, and properties. (Remember)</li> <li>Illustrate the application of the LPG model through examples in domains such as social networks, retail commerce, banking fraud detection, and healthcare. (Apply)</li> </ul>"},{"location":"prompts/course-description/#3-gain-proficiency-in-gql","title":"3. Gain Proficiency in GQL","text":"<ul> <li>List the key features of GQL and understand how queries are constructed. (Remember and Understand)</li> <li>Construct basic GQL queries to retrieve and manipulate data in an LPG database. (Apply)</li> </ul>"},{"location":"prompts/course-description/#4-analyze-gql-in-comparison-to-other-query-languages","title":"4. Analyze GQL in Comparison to Other Query Languages","text":"<ul> <li>Compare and contrast GQL with SQL in terms of syntax, functionality, and use cases. (Analyze)</li> <li>Demonstrate the similarities in transaction support between GQL and SQL. (Understand and Apply)</li> <li>Differentiate GQL from OpenCypher, highlighting their unique features and strengths. (Analyze)</li> </ul>"},{"location":"prompts/course-description/#5-explore-advanced-features-of-gql","title":"5. Explore Advanced Features of GQL","text":"<ul> <li>Describe the new features introduced in GQL beyond existing query languages. (Understand)</li> <li>Utilize GQL\u2019s advanced pattern matching capabilities to solve complex querying problems. (Apply)</li> </ul>"},{"location":"prompts/course-description/#6-evaluate-limitations-and-future-directions","title":"6. Evaluate Limitations and Future Directions","text":"<ul> <li>Evaluate the current limitations of GQL, including the lack of support for constraints, role-based access control for vertices, and accumulators. (Evaluate)</li> <li>Propose potential improvements or extensions to GQL to address its shortcomings. (Create)</li> <li>Discuss the role of GQL in future AI systems, particularly in generating precise queries over large world-models. (Understand and Evaluate)</li> <li>Discuss the need for a new vector-index structure for similarity calculations in GQL. (Analyze and Evaluate)</li> </ul>"},{"location":"prompts/course-description/#7-enhance-learning-with-ai-integration","title":"7. Enhance Learning with AI Integration","text":"<ul> <li>Explore how AI-powered tools can assist in learning and writing GQL queries, providing real-time feedback and optimization suggestions. (Apply and Analyze)</li> </ul>"},{"location":"prompts/course-description/#course-structure","title":"Course Structure","text":"<p>The course is organized into six units, each designed to build upon the previous one, ensuring a progressive development of skills and knowledge:</p>"},{"location":"prompts/course-description/#unit-1-introduction-to-database-query-languages-and-the-need-for-gql","title":"Unit 1: Introduction to Database Query Languages and the Need for GQL","text":"<ul> <li>Overview of declarative query languages (SQL, OpenCypher, SPARQL, XQuery).</li> <li>Importance of standards for portability and avoiding vendor lock-in.</li> <li>Limitations of relational databases with JOIN operations.</li> <li>Introduction to the LPG model and its advantages over relational models.</li> <li>Why SQL falls short for LPG databases.</li> <li>Activities: Case studies on database limitations; discussion on standardization benefits.</li> </ul>"},{"location":"prompts/course-description/#unit-2-understanding-the-lpg-data-model","title":"Unit 2: Understanding the LPG Data Model","text":"<ul> <li>Detailed exploration of vertices, edges, and properties in LPG.</li> <li>Practical examples of LPG models in social networks, retail, banking fraud, and healthcare.</li> <li>Activities: Design simple LPG schemas for given scenarios.</li> </ul>"},{"location":"prompts/course-description/#unit-3-introduction-to-gql","title":"Unit 3: Introduction to GQL","text":"<ul> <li>Key features and syntax of GQL.</li> <li>Writing and executing basic GQL queries.</li> <li>Activities: Hands-on query writing with AI-assisted feedback.</li> </ul>"},{"location":"prompts/course-description/#unit-4-comparing-gql-with-other-query-languages","title":"Unit 4: Comparing GQL with Other Query Languages","text":"<ul> <li>Comparative analysis of GQL with SQL and OpenCypher.</li> <li>Transaction support in GQL and SQL.</li> <li>Activities: Convert SQL queries to GQL; analyze differences with OpenCypher.</li> </ul>"},{"location":"prompts/course-description/#unit-5-advanced-features-and-pattern-matching-in-gql","title":"Unit 5: Advanced Features and Pattern Matching in GQL","text":"<ul> <li>New features unique to GQL.</li> <li>Advanced pattern matching techniques.</li> <li>Activities: Solve complex querying problems using pattern matching.</li> </ul>"},{"location":"prompts/course-description/#unit-6-limitations-and-future-directions-of-gql","title":"Unit 6: Limitations and Future Directions of GQL","text":"<ul> <li>Critical evaluation of GQL\u2019s limitations (e.g., constraints, access control, accumulators).</li> <li>Exploration of future enhancements, such as vector-index structures.</li> <li>GQL\u2019s role in AI-driven world-model querying.</li> <li>Activities: Propose GQL extensions; discuss AI integration scenarios.</li> </ul>"},{"location":"prompts/course-description/#teaching-methodology","title":"Teaching Methodology","text":"<p>Each unit combines theoretical lectures with practical, hands-on exercises to reinforce learning. AI-powered tools are integrated throughout the course to:</p> <ul> <li>Provide real-time feedback on query syntax and performance.</li> <li>Suggest optimizations for GQL queries.</li> <li>Facilitate interactive learning through personalized examples and debugging assistance.</li> </ul> <p>Assessments include quizzes (Remember and Understand), practical assignments (Apply and Analyze), and a final project (Evaluate and Create) where students design and query an LPG database for a real-world application.</p>"},{"location":"prompts/course-description/#learning-outcomes","title":"Learning Outcomes","text":"<p>By the end of \"Learning GQL with AI,\" students will:</p> <ol> <li>Be proficient in writing and optimizing GQL queries for labeled property graphs.</li> <li>Understand GQL\u2019s position within the landscape of query languages and its advantages over alternatives.</li> <li>Critically evaluate GQL\u2019s current capabilities and propose future enhancements.</li> <li>Appreciate GQL\u2019s relevance to AI systems and graph-based applications.</li> <li>Leverage AI tools to enhance their learning and problem-solving skills.</li> </ol> <p>This course prepares students to apply GQL in academic research, industry projects, or advanced studies, particularly in fields where graph databases and AI intersect.</p>"}]}